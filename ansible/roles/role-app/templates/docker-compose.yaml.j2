version: '3.8'
services:

  nginx:
    container_name: nginx
    image: nginx:latest
    restart: unless-stopped
    networks:
      - server-net
    volumes:
      - ./conf/proxy/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./conf/proxy/certbot/conf:/etc/letsencrypt
      - ./volume/proxy/certbot/www:/var/www/certbot
    ports:
      - 80:80
      - 443:443
      - 127.0.0.1:8000:8000
    depends_on:
      - grafana
      - prometheus
      - rabbitmq
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: nginxexporter
    restart: unless-stopped
    networks:
      - server-net
    command:
      - '-nginx.scrape-uri=http://nginx:8000/nginx_status'
      - '-nginx.retries=10'
    depends_on:
      - nginx

  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    networks:
      server-net:
    volumes:
      - ./conf/proxy/certbot/conf:/etc/letsencrypt
      - ./volume/proxy/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; chmod 644 /etc/letsencrypt/archive/{{ domains }}/*.pem; sleep 12h & wait $${!}; done;'"
 
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./conf/monitoring/prometheus:/etc/prometheus
      - ./volume/monitoring/prometheus/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:80/prometheus'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - server-net

  alertmanager:
    image: prom/alertmanager:v0.22.2
    container_name: alertmanager
    volumes:
      - ./conf/monitoring/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - server-net

  alertmanager-bot:
    container_name: alertmanager-bot 
    command:
      - --alertmanager.url=http://alertmanager:9093
      - --log.level=info
      - --store=bolt
      - --bolt.path=/data/bot.db
    environment:
      TELEGRAM_ADMIN: $TG_ADMIN
      TELEGRAM_TOKEN: $TG_TOKEN
    image: metalmatze/alertmanager-bot:0.4.3
    networks:
      - server-net
    expose:
      - 8080
    restart: unless-stopped
    volumes:
      - ./volume/tg-bot:/data

  nodeexporter:
    image: prom/node-exporter:latest
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100 
    networks:
      - server-net

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.37.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - server-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./volume/monitoring/grafana/grafana_data:/var/lib/grafana
      - ./conf/monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana
      - GF_SERVER_SERVER_FROM_SUB_PATH=true
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - server-net

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: unless-stopped
    expose:
      - 15672
      - 15692
    ports:
      - 5672:5672
      - 1883:1883
      - 8883:8883 
      - 15675:15675
      - 15676:15676
    cap_add:
      - ALL
    volumes:
      - ./volume/rabbitmq/lib:/var/lib/rabbitmq
      - ./volume/rabbitmq/log:/var/log
      - ./conf/rabbitmq/conf/:/etc/rabbitmq/
      - ./conf/proxy/certbot/conf/archive/{{ domains }}:/etc/rabbitmq/certs
    networks:
      - server-net

networks:
  server-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: {{ docker_subnet }}

